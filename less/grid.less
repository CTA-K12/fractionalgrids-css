//
// Grid system
// --------------------------------------------------
// Author: Curtis G Hanson, MESD <chanson@mesd.k12.or.us>
// Licensed under http://www.apache.org/licenses/LICENSE-2.0
// MIT License
//

// Set the container width, and override it for fixed navbars in media queries
.container {
    .container-fixed();
}

// mobile first defaults
.row {
    .make-row();
}

div[class^='col-'],
div[class*=' col-'] {
    position:                      relative;
    min-height:                         1px;
    padding-left:  (@grid-gutter-width / 2);
    padding-right: (@grid-gutter-width / 2);
    float:                             left;
}

// demo styles
div[class^='col-'],
div[class*=' col-'] {
    padding-top: 10px;
    padding-bottom: 10px;
    background-color: #eee;
    background-color: rgba(86,61,124,.15);
    border: 1px solid #ddd;
    border: 1px solid rgba(86,61,124,.2);
}

.get-gcds (@grid-columns);

.column-maker (@gcd-len, @grid-columns, @gcd-arr, xs);
.column-maker (@gcd-len, @grid-columns, @gcd-arr, xs, offset);
.column-maker (@gcd-len, @grid-columns, @gcd-arr, xs, push);
.column-maker (@gcd-len, @grid-columns, @gcd-arr, xs, pull);


@media (min-width: @screen-sm-min) {
    .container {
        width: @container-sm;
    }
    .column-maker (@gcd-len, @grid-columns, @gcd-arr, sm);
    .column-maker (@gcd-len, @grid-columns, @gcd-arr, sm, offset);
    .column-maker (@gcd-len, @grid-columns, @gcd-arr, sm, push);
    .column-maker (@gcd-len, @grid-columns, @gcd-arr, sm, pull);
}

@media (min-width: @screen-md-min) {
    .container {
        width: @container-md;
    }
    .column-maker (@gcd-len, @grid-columns, @gcd-arr, md);
    .column-maker (@gcd-len, @grid-columns, @gcd-arr, md, offset);
    .column-maker (@gcd-len, @grid-columns, @gcd-arr, md, push);
    .column-maker (@gcd-len, @grid-columns, @gcd-arr, md, pull);
}

@media (min-width: @screen-lg-min) {
    .container {
        width: @container-lg;
    }
    .column-maker (@gcd-len, @grid-columns, @gcd-arr, lg);
    .column-maker (@gcd-len, @grid-columns, @gcd-arr, lg, offset);
    .column-maker (@gcd-len, @grid-columns, @gcd-arr, lg, push);
    .column-maker (@gcd-len, @grid-columns, @gcd-arr, lg, pull);
}

.get-gcds (@cols) {
    @gcd-arr: ~`(function(c){var f=[];for(var d=c;d>0;d--){for(var n=d;n>0;n--){function r(n,d){var g=function g(a,b){return b?g(b,a%b):a;};g=g(n,d);return (n/g)+"-"+(d/g);}var g=r(n,d);if(-1===f.indexOf(g))f.push(g);}}return f.join(",");})("@{cols}")`;
    @gcd-len: ~`(function(c){ return c.split(",").length})("@{gcd-arr}")`;
}

.column-maker (@totalgcds, @totalcols, @gcdsarray, @size, @type: ~'') {

    // looper function
    .gcd-loop (@k) when (@k > 0) {

        // get current gcd
        @currgcd: ~`(function(g,i){return g.split(",")[i-1]})("@{gcdsarray}","@{k}")`;
        @temp2:   ~'';

        // looper function
        .denomenator-loop (@j, @temp2) when (@j > 0) {

            // looper function
            .numerator-loop (@i, @temp2) when (@i > 0) {

                // get testing gcd
                @testgcd: ~`(function(n,d){var g=function g(a,b){return b?g(b,a%b):a;};g=g(n,d);return (n/g)+"-"+(d/g);})("@{i}","@{j}")`;
                
                // if @gcd === gcd(numerator/denominator)
                // add it to the selectors

                // when it's the first find and type is empty
                .compare(@curr, @test, @temp1, @size, @type) when (@test = @curr) and (@temp1 = ~'') and (@type = ~'') {
                    @temp2: ".col-@{size}-@{i}-@{j}";
                }

                // when it's the first find and type is not empty
                .compare(@curr, @test, @temp1, @size, @type) when (@test = @curr) and (@temp1 = ~'') and not (@type = ~'') {
                    @temp2: ".col-@{size}-@{type}-@{i}-@{j}";
                }

                // when it's not the first find and type is empty
                .compare(@curr, @test, @temp1, @size, @type) when (@test = @curr) and not (@temp1 = ~'') and (@type = ~'') {
                    @temp2: "@{temp1}, .col-@{size}-@{i}-@{j}";
                }

                // when it's not the first find and type is empty
                .compare(@curr, @test, @temp1, @size, @type) when (@test = @curr) and not (@temp1 = ~'') and not (@type = ~'') {
                    @temp2: "@{temp1}, .col-@{size}-@{type}-@{i}-@{j}";
                }

                .compare(@currgcd, @testgcd, @temp2, @size, @type);

                // print when i and j are 1
                .printitout (@t, @y, @a, @b) when (@a = 1) and (@b = 1) and (@y = ~'') {
                    @selectors: ~"@{t}";
                    @width: `(function(x){var y=x.split("-");return y[0]/y[1];})("@{currgcd}")`;
                    @{selectors} {
                        width: percentage(@width);
                    }
                }

                .printitout (@t, @y, @a, @b) when (@a = 1) and (@b = 1) and (@y = offset) {
                    @selectors: ~"@{t}";
                    @margin: `(function(x){var y=x.split("-");return y[0]/y[1];})("@{currgcd}")`;
                    @{selectors} {
                        left-margin: percentage(@margin);
                    }
                }

                .printitout (@t, @y, @a, @b) when (@a = 1) and (@b = 1) and (@y = push) {
                    @selectors: ~"@{t}";
                    @left: `(function(x){var y=x.split("-");return y[0]/y[1];})("@{currgcd}")`;
                    @{selectors} {
                        left: percentage(@left);
                    }
                }

                .printitout (@t, @y, @a, @b) when (@a = 1) and (@b = 1) and (@y = pull) {
                    @selectors: ~"@{t}";
                    @right: `(function(x){var y=x.split("-");return y[0]/y[1];})("@{currgcd}")`;
                    @{selectors} {
                        right: percentage(@right);
                    }
                }

                .printitout (@temp2, @type, @i, @j);

                // next iteration
                .numerator-loop (@i - 1, @temp2);
            }

            // start the numerator loop
            .numerator-loop (@j, @temp2);

            // next iteration
            .denomenator-loop (@j - 1, @temp2);

        }

        // start the denomenator loop with highest column count
        .denomenator-loop (@totalcols, @temp2);

        // next iteration
        .gcd-loop (@k - 1);
    }

    // start the gcd loop
    .gcd-loop (@totalgcds);
}
