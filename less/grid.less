//
// Grid system
// --------------------------------------------------
// Author: Curtis G Hanson, MESD <chanson@mesd.k12.or.us>
// Licensed under http://www.apache.org/licenses/LICENSE-2.0
// MIT License
//

// Set the container width, and override it for fixed navbars in media queries
.container {
    .container-fixed();
}

// mobile first defaults
.row {
    .make-row();
}

div[class^='col-'],
div[class*=' col-'] {
    position:                      relative;
    min-height:                         1px;
    padding-left:  (@grid-gutter-width / 2);
    padding-right: (@grid-gutter-width / 2);
    float:                             left;
}

// demo styles
div[class^='col-'],
div[class*=' col-'] {
    padding-top: 10px;
    padding-bottom: 10px;
    background-color: #eee;
    background-color: rgba(86,61,124,.15);
    border: 1px solid #ddd;
    border: 1px solid rgba(86,61,124,.2);
}
// get the fractions stuff
.get-smallest-fractions (@grid-columns);

// start the loop
.the-loop (xs, @fractions-arr, @grid-columns, @fractions-arr-len);


@media (min-width: @screen-sm-min) {
    .container {
        width: @container-sm;
    }
    .the-loop (sm, @fractions-arr, @grid-columns, @fractions-arr-len);
}

@media (min-width: @screen-md-min) {
    .container {
        width: @container-md;
    }
    .the-loop (md, @fractions-arr, @grid-columns, @fractions-arr-len);
}

@media (min-width: @screen-lg-min) {
    .container {
        width: @container-lg;
    }
    .the-loop (lg, @fractions-arr, @grid-columns, @fractions-arr-len);
}

.get-smallest-fractions (@total-columns) {
    @fractions-arr:     ~`(function(c){var f=[];for(var d=c;d>0;d--){for(var n=d;n>0;n--){function r(n,d){var g=function g(a,b){return b?g(b,a%b):a;};g=g(n,d);return (n/g)+"-"+(d/g);}var g=r(n,d);if(-1===f.indexOf(g))f.push(g);}}return f.join(",");})("@{total-columns}")`;
    @fractions-arr-len: ~`(function(c){ return c.split(",").length})("@{fractions-arr}")`;
}

// the loop
.the-loop (@size, @fraction-array, @total-columns, @k) when (@k > 0) {

    // get the current fraction
    @current-fraction:    ~`(function(f,k){return f.split(",")[k-1]})("@{fraction-array}","@{k}")`;
    @current-numerator:   `(function(x){var n=x.split("-");return Number(n[0]);})("@{current-fraction}")`;
    @current-denominator: `(function(x){var d=x.split("-");return Number(d[1]);})("@{current-fraction}")`;
    @temp-span-2:         ~'';
    @temp-push-2:         ~'';
    @temp-pull-2:         ~'';
    @temp-offset-2:       ~'';

    // all numerator/denominator loops but the last
    .numerator-denominator-loop (@size, @i, @j, @total-columns, @temp-span-2, @temp-push-2, @temp-pull-2, @temp-offset-2) when (@i <= @total-columns) and (@j <= @total-columns) {

        // when it's the first iteration
        .write-to-selector (@size, @i, @j, @temp-span-1, @temp-push-1, @temp-pull-1, @temp-offset-1) when (@temp-span-1 = ~'') {
            @temp-span-2:   ".col-@{size}-@{i}-@{j}";
            @temp-push-2:   ".col-@{size}-push-@{i}-@{j}";
            @temp-pull-2:   ".col-@{size}-pull-@{i}-@{j}";
            @temp-offset-2: ".col-@{size}-offset-@{i}-@{j}";
        }

        // when it's not the first find and type is empty
        .write-to-selector (@size, @i, @j, @temp-span-1, @temp-push-1, @temp-pull-1, @temp-offset-1) when not (@temp-span-1 = ~'') {
            @temp-span-2:   "@{temp-span-1}, .col-@{size}-@{i}-@{j}";
            @temp-push-2:   "@{temp-push-1}, .col-@{size}-push-@{i}-@{j}";
            @temp-pull-2:   "@{temp-pull-1}, .col-@{size}-pull-@{i}-@{j}";
            @temp-offset-2: "@{temp-offset-1}, .col-@{size}-offset-@{i}-@{j}";
        }

        .write-to-selector (@size, @i, @j, @temp-span-2, @temp-push-2, @temp-pull-2, @temp-offset-2);

        .numerator-denominator-loop (@size, @i + @current-numerator, @j + @current-denominator, @total-columns, @temp-span-2, @temp-push-2, @temp-pull-2, @temp-offset-2);

    }

    // last loop
    .numerator-denominator-loop (@size, @i, @j, @total-columns, @temp-span-2, @temp-push-2, @temp-pull-2, @temp-offset-2) when (@i > @total-columns), (@j > @total-columns) {
        @s-span:   ~"@{temp-span-2}";
        @s-push:   ~"@{temp-push-2}";
        @s-pull:   ~"@{temp-pull-2}";
        @s-offset: ~"@{temp-offset-2}";
        @percent:  `(function(x){var y=x.split("-");return y[0]/y[1];})("@{current-fraction}")`;
        @{s-span} {
            width: percentage(@percent);
        }
        @{s-push} {
            left: percentage(@percent);
        }
        @{s-pull} {
            right: percentage(@percent);
        }
        @{s-offset} {
            left-margin: percentage(@percent);
        }    
    }

    // first numerator/denominator loop
    .numerator-denominator-loop (@size, @current-numerator, @current-denominator, @total-columns, @temp-span-2, @temp-push-2, @temp-pull-2, @temp-offset-2);

    // iterate the main loop
    .the-loop (@size, @fraction-array, @total-columns, @k - 1);

}